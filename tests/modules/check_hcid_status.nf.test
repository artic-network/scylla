nextflow_workflow {

    name "Test Workflow check_hcid_status"
    script "modules/check_hcid_status.nf"
    workflow "check_hcid_status"
    tag "hcid"

    test("test_hcid_cchf_positive") {

        when {
            params {
                
            }
            workflow {
                """
                input[0] = Channel.of(
                    tuple(
                        "cchf_test",
                        "PlusPF",
                        file("${projectDir}/tests/test-data/hcid/3052518/cchf_kraken_report.txt", checkIfExists: true)
                    )
                )
                input[1] = Channel.of(
                    tuple(
                        "cchf_test",
                        file("${projectDir}/tests/test-data/hcid/3052518/cchf_mock.fastq", checkIfExists: true)
                    )
                )
                input[2] = file("${projectDir}/tests/test-data/hcid/3052518/tax_dump", checkIfExists: true)
                """
            }
        }

        then {
            assert workflow.success
            assert path("${outputDir}/cchf_test/qc/hcid.counts.csv").exists()
            assert path("${outputDir}/cchf_test/qc/3052518.warning.json").exists() 
            assert snapshot(workflow.out, path("${outputDir}/cchf_test/qc/hcid.counts.csv")).match()
            
            // assert path("${outputDir}/cchf_test/qc/hcid.counts.csv").readLines().contains('Crimean Congo haemorrhagic fever (CCHF),3052518,1,10,10,10,1.0,NC_005300.2:4:0.577898|NC_005301.3:3:0.190040|NC_005302.1:3:0.813397,0')
            // def warning_json = path("${outputDir}/cchf_test/qc/3052518.warning.json").json
            // assert warning_json.classified_count == 10
            // assert warning_json.mapped_count == 10
        }

    }

    test("test_hcid_cchf_negative") {

        when {
            params {

            }
            workflow {
                """
                input[0] = Channel.of(
                    tuple(
                        "cchf_test",
                        "PlusPF",
                        file("${projectDir}/tests/test-data/hcid/3052518/cchf_kraken_report_blank.txt", checkIfExists: true)
                    )
                )
                input[1] = Channel.of(
                    tuple(
                        "cchf_test",
                        file("${projectDir}/tests/test-data/hcid/3052518/blank.fastq", checkIfExists: true)
                    )
                )
                input[2] = file("${projectDir}/tests/test-data/hcid/3052518/tax_dump", checkIfExists: true)
                """
            }
        }

        then {
            assert workflow.success
            assert path("${outputDir}/cchf_test/qc/hcid.counts.csv").exists()
            assert !path("${outputDir}/cchf_test/qc/3052518.warning.json").exists()
            assert snapshot(workflow.out, path("${outputDir}/cchf_test/qc/hcid.counts.csv")).match()
        }

    }

}
